package log;

/**
 * Логгирование - это процесс записи в файл полезной информации
 * о работе программы.
 *
 * Полученный файл называют лог-файлом.
 * Если приложение работает плохо, то первое что проверяют - это лог файл.
 * Посмотри в лог" - это значит открыть файл логгирования и
 * посмотреть наличие Exception.
 *
 * В Java есть удобная библиотека,
 * которая позволяется решать эти вопросы.
 *
 * Lob4j - библиотека позволяет осуществить логгирование
 * процессов в приложении.
 *
 * ---------------------------------
 *
 * Подключим библиотеку Log4j к нашему проекту.
 *
 * Откройте файл c:\projects\job4j_design\pom.xml
 * Добавьте зависимость log4j. В курсе используется первая версия.
 * Это связано с другой библиотекой slf4j.
 *
 * Log4j имеет версию 2, но slf4j нет. Поэтому, чтобы не потерять
 * совместимость пока используем первую версию log4j
 *
 * <dependency>
 *     <groupId>log4j</groupId>
 *     <artifactId>log4j</artifactId>
 *     <version>1.2.17</version>
 * </dependency>
 *
 * ---------------------------------
 *
 * Добавим настройки. В них мы указываем, в какой файл будет
 * записывать информацию и в каком формате.
 * Создайте файл /chapter_002/src/main/resources/log4j.properties.
 *
 * Содержимое файла log4j.properties.
 *
 * log4j.rootLogger=DEBUG, console
 * log4j.appender.console=org.apache.log4j.ConsoleAppender
 * log4j.appender.console.layout=org.apache.log4j.PatternLayout
 * log4j.appender.console.layout.ConversionPattern=%d{ISO8601} %5p %c:%M:%L - %m%n
 *
 * 1. Запись в консоль, файла или базу данных.
 * Log4j позволяет записывать информацию не только в консоль или файл,
 * но так же в базу данных или отправлять по почту.
 * В нашем примере мы используем вывод информации в консоль.
 *
 * log4j.appender.console=org.apache.log4j.ConsoleAppender
 *
 * В разделе JDBC мы добавим конфигурацию для вывода в информации в файл.
 * На данном этапе используем только вывод в консоль.
 *
 * 2. Формат записи. В логах удобно получать информацию о времени
 * выполнении классе и строчке кода, где была сделана запись.
 * log4j.appender.console.layout=org.apache.log4j.PatternLayout
 * log4j.appender.console.layout.ConversionPattern=%d{ISO8601} %5p %c:%M:%L - %m%n
 *
 * Разберем вывод.
 * Дата.
 * %d{ISO8601}
 *
 * Уровень сообщения.
 * %5p
 *
 * Класс, метод, строчка.
 * %c:%M:%L
 *
 * Текст сообщения.
 * %m%n
 *
 * 3. Уровень логгирования.
 * log4j.rootLogger=DEBUG, console
 *
 * Чем критичнее сообщение, тем выше должен быть уровень сообщения.
 * ERROR - критические ошибки.
 * DEBUG - отладочная информация.
 *
 * -------------------------------
 *
 * Покажем работу Log4j. (см. UsageLog4j.java)
 * вывод консоли должен быть примерно такой
 * 2020-11-01 11:33:11,074 DEBUG log.UsageLog4j:main:12 - debug message
 * 2020-11-01 11:33:11,078  INFO log.UsageLog4j:main:13 - info message
 * 2020-11-01 11:33:11,078  WARN log.UsageLog4j:main:14 - warn message
 * 2020-11-01 11:33:11,081 ERROR log.UsageLog4j:main:15 - error message
 */
