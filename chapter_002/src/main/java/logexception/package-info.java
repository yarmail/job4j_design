package logexception;

/**
 * Log. Displaying exceptions.
 * Лог. Вывод исключений
 *
 * 4. Slf4j - вывод exception. [#293806]
 *
 * Запомните правило, если в проекте используется
 * логгер, то для вывода ошибок или отладочной
 * информации нужно использовать только логгер.
 * Придерживаетесь единого стиля во всем проекте.
 * -------
 *
 * Рассмотрим неправильное использование логгера и исключений.
 *
 * 1. Дублирование ошибки.
 * } catch (Exception e) {
 * e.printStackTrace();
 * LOG.error("Exception in log example", e);
 * }
 * В консоли будет дублирующая информация.
 *
 * ---
 *
 * 2. Исключение без stack trace.
 * } catch (Exception e) {
 *     LOG.error(e.getMessage());
 * }
 * В этом случае мы не можем понять, кто вызывал этот код.
 * Не можем отследить причину.
 *
 * ---
 *
 * 3. Перепутанные параметры.
 *
 * } catch (Exception e) {
 *     LOG.error("Error {}, User {}", e, "Petr");
 * }
 *
 * В этом случае объект исключение конвертируется в String.
 * Это приводит к потере stack trace.
 * ----
 *
 * 4. Вывод в лог и генерация нового исключения.
 * } catch (Exception e) {
 *     LOG.error("Error", e);
 *     throw e;
 * }
 * Это приводит к дублированию исключения.
 * Либо в лог, либо генерация.
 */
