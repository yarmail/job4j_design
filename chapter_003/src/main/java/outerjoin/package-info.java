package outerjoin;

/**
 * Ранее мы говорили про внутренний (inner) join.
 * Давайте вспомним что влияет на результат join:
 *
 * 1.Тип join
 * 2. Условие соединения
 * Один из типов join мы уже рассмотрели. Давайте познакомимся с другими.
 *
 * left outer join, right outer join, full outer join
 *
 * Данные типы соединений являются внешними. Что значит «внешний» в данном контексте?
 * Чтобы это понять посмотрим, как мы прописываем соединение таблиц:
 *
 * select .. from табл1 <тип соединения> join табл2 on <условие>
 *
 * Напоминаю, что если не указать тип соединения по умолчанию он будет inner.
 *
 * Итак, внешнее соединение работает по следующему алгоритму:
 * берется исходная таблица и для каждой ее записи находиться запись,
 * которая бы удовлетворяла условию. Если она не будет найдена,
 * то по столбцам будут стоять null.
 *
 * «Внешней» здесь будет таблица, к которой присоединяют.
 *
 * Внешние соединения бывают 3-х типов:
 * левое внешнее соединение (left outer join),
 * правое внешнее соединение (right outer join),
 * полное внешнее соединение (full outer join)
 *
 * Заметьте! Писать outer необязательно.
 *
 * ВАЖНО
 * Т.к. связь между таблицами many-to-one,
 * то предпочтительней первый вариант запроса,
 * т.е. выполнять присоединение таблицы,
 * которая one, к таблице, которая many.
 * (в нашем случае owners к devices?)
 *
 * =============
 *
 * right outer join
 * Это соединение аналогично левому соединению только выбирается
 * «правая» таблица в качестве внешней. «Лево» или «право» различается
 * относительно join. Синтаксически:
 *
 * select .. from левая <тип> join правая on <условие>
 *
 * Таким образом, при правом соединении выбираются записи
 * из правой таблицы и для них подбираются записи из левой таблицы,
 * которые удовлетворяют условию.
 *
 * ============
 *
 * full join
 * Данный тип внешнего соединения дает результат левого + правого соединений,
 * т.е. представляет собой комбинацию этих двух соединений.
 * Работает он так: выполняется левое соединение,
 * выполняется правое соединение и оба результата этих запросов попадают
 * в результирующую выборку. Синтаксис такой:
 *
 * select .. from табл1 full join табл2 on <условие>
 * Получим такой результат, видно что это left + right
 * Для проверки можно написать так и увидеть те же самые данные:
 * -
 * select * from devices d left join owners o on d.owner_id = o.id
 * union
 * select * from devices d right join owners o on d.owner_id = o.id;
 * -
 *
 * ===========
 *
 * cross join
 *
 * Этот вид join используется редко. Результатом этого запроса является
 * декартово множество, т.е. все пары элементов. Например, если в таблице
 * 1 N записей, а в таблице 2 M записей, то мы получим в результате N * M записей.
 * Хорошим примером декартова множества является таблица умножения. Синтаксис такой:
 *
 * select .. from табл1 cross join табл2 ..
 *
 * Заметьте! on в этом случае не пишется
 *
 * Если напишем такой запрос для наших таблиц,
 * то мы получим для каждого устройства всех возможных его владельцев.
 */