package tableslinks;

/**
 * table links
 * 0.1. Связи между таблицами [#373615]
 *
 * Как было сказано ранее, помимо понятия
 * «Сущность», в реляционных базах данных
 * существует понятие «Отношение».
 * В этом уроке мы рассмотрим какие бывают отношения между сущностями.
 *
 * Когда мы говорим про отношения в рамках реляционных баз данных,
 * мы подразумеваем количественные отношения. Говоря простыми словами,
 * сколько на сущность A приходится сущностей B.
 *
 * По ходу объяснения будут рисоваться диаграммы. Диаграммы
 * не соответствуют в точности ни одной спецификации,
 * хотя чем-то похожи на UML. Для рисования будем
 * использовать сервис https://app.diagrams.net/
 *
 * many-to-one и one-to-many
 *
 * Когда говорят и то и то другое, подразумевают одну и ту же связь.
 * В чистом виде в БД реализуется связь именно many-to-one
 *
 * Пример:
 *
 * Должность и Сотрудник. Одну должность могут иметь
 * несколько сотрудников, причем сотрудник может иметь одну должность.
 *
 * Для связи между собой таблиц существует понятие "внешний ключ".
 * Внешний ключ – атрибут таблицы, который содержит
 * значения из другой таблицы, что позволяет
 * связать записи между собой.
 *
 * Пример many_to_one.sql
 *
 * ----
 *
 * Если возникает симметрия при применении связи many-to-one
 * к двум сущностям, то такая связь называется many-to-many.
 *
 * Пример:
 *
 * Человек и Курс. Человек может проходить много курсов
 * (one-to-many), в то же время курс могут проходить много
 * человек (many-to-one).
 *
 * Данная связь организуется с помощью вспомогательной таблицы,
 * т.к. на уровне БД мы имеем только связь many-to-one.
 *
 * Пример many_to_many.sql
 *
 * ---------------------------
 *
 * one-to-one
 *
 * Данная связь используется крайне редко,
 * по сравнению с первыми двумя.
 *
 * Пример:
 * Очевидно, что паспорт и человек,
 * это связь один к одному. У каждого человека
 * есть только один паспорт. У паспорта может
 * быть только один владелец.
 *
 * Организуется эта связь немного сложнее,
 * чем первые две. В первую очередь тут
 * стоит задать вопрос: какую связь мы хотим?
 * Однонаправленную (unidirectional)
 * или двунаправленную (bidirectional)?
 * Т.е. как мы хотим извлекать данные?
 * В контексте примера: мы хотим по паспорту получать
 * человека или наоборот? Или и так и так?
 *
 * Пример one_to_one.sql
 *
 *
 */
